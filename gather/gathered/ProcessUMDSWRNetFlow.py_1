import re
import sys
import os
import shutil
import math
import gc
import operator
from datetime import datetime,timedelta
import xml.etree.ElementTree as xml
import numpy as np
import MFBinaryClass as mfb 
import pestUtil

Missing = 99999999.

def SWRBudgetError(text,error):
    cerror = {  0: '', \
                1: 'not defined', \
               10: 'no SWR data specified for extraction', \
               11: 'no pools specified' }              
    print 'Error: {0} {1}.'.format( text, cerror[error] )
    sys.exit(error)

def sampleDates( sim_dates, TimeSample ):
    output_dates = []
    if TimeSample.lower() == 'weekly':
        on_day = 0
        for idx,t in enumerate( sim_dates ):
            on_day += 1
            if on_day > 7:
                output_dates.append( sim_dates[idx-1] )
                on_day = 0
    if TimeSample.lower() == 'monthly':
        on_month = sim_dates[0].month
        for idx,t in enumerate( sim_dates ):
            if t.month != on_month:
                output_dates.append( sim_dates[idx-1] )
                on_month = t.month
    elif TimeSample.lower() == 'yearly':
        on_year = sim_dates[0].year
        for idx,t in enumerate( sim_dates ):
            if t.year != on_year:
                output_dates.append( sim_dates[idx-1] )
                on_year = t.year
    output_dates.append( sim_dates[-1] )
    return np.array( output_dates )

def dataAdd(outtime,data0,intime,indata):
    nouttime = outtime.shape[0]
    outdata = np.copy( data0 )
    for [d,v] in zip( intime, indata ):
        ipos = (d-outtime[0]).days
        if ipos < 0:
            continue
        elif ipos > nouttime - 1:
            break
        if data0[ipos] == Missing:
            outdata[ipos] = v
        else:
            outdata[ipos] += v
    return outdata

def accumulateData( output_dates, sim_dates, sim_data, fracTarget ):
    noutdates = output_dates.shape[0]
    output_data = np.empty( (noutdates), np.float )
    output_data.fill( Missing )
    jdx    = 0
    icount = 0.0
    iv     = 0.0
    vsum   = 0.0
    for idx,[d,v] in enumerate( zip( sim_dates, sim_data ) ):
        if d > output_dates[jdx]:
            frac = iv / icount
            if frac > fracTarget:
                output_data[jdx] = vsum / (iv * 60. * 60. * 24. )
            jdx   += 1
            icount = 0.0
            iv     = 0.0
            vsum   = 0.0
        icount += 1.0
        if v != Missing:
            iv   += 1.0
            vsum += v
    #--save final sum
    frac = iv / icount
    if frac > fracTarget:
        output_data[jdx] = vsum / (iv * 60. * 60. * 24. )
    #--return    
    return output_data

def processObservations( output_inflow, output_outflow ):
    output_obs = np.empty( (output_inflow.shape[0]), np.float )
    output_obs.fill( Missing )   
    nobs = 0
    for idx,[inf,outf] in enumerate( zip( output_inflow, output_outflow ) ):
        if inf != Missing and outf != Missing:
            nobs += 1
            output_obs[idx] = outf - inf
    return nobs, output_obs

def removeUnpairedData( obs, sim ):
    revised_sim = np.empty( (obs.shape[0]), np.float )
    revised_sim.fill( Missing )   
    for idx,o in enumerate( obs ):
        if o != Missing:
            revised_sim[idx] = sim[idx]
    return revised_sim

def saveData(f, ctag, tdates, tdata):
    ctag = ctag.replace( "  ", "" )
    ctag = ctag.replace( " ", "" )
    ctag = ctag.replace( "-", "" ) 
    ctag = ctag.replace( ",", "" )
    ctag = ctag.replace( "at", "" )
    if len(ctag) > 10:
        ctag = ctag[-10:]
    for [d,v] in zip( tdates, tdata ):
        if v == Missing:
            continue
        cdate = datetime.strftime( d, '%m/%d/%Y %H:%M:%S' )
        f.write('{0} {1} {2}\n'.format( ctag, cdate, v ))

def MaskOutputTime(tdata):
    outdata = np.copy( tdata )
    #--mask data
    return np.ma.masked_equal( outdata, Missing )

def DailyStatistics(obs,sim):
    me = 0.0
    mae = 0.0
    rmse = 0.0
    npairs = 0
    for [o,s] in zip(obs,sim):
        if o != Missing and s != Missing:
            npairs += 1
            me += (s - o)
            mae += abs( s - o )
            rmse += math.pow(( s - o ),2.0)
    if npairs > 0:
        me /= float(npairs)
        mae /= float(npairs)
        rmse /= float(npairs)
        rmse = math.sqrt( rmse )
    return me, mae, rmse, npairs 


SaveObsData = False
SaveSimData = False
TimeSample = None

#--read base xml data
xml_file = os.path.join( '..', 'xml', 'SWNetFlow.xml' )
tree = xml.parse(xml_file)
root = tree.getroot()
ctag = 'SWRPoolFile'
child = root.find(ctag)
if child == None: SWRBudgetError(ctag,1)
SWRPoolFile = child.text
ctag = 'SWRFlowFile'
child = root.find(ctag)
if child == None: SWRBudgetError(ctag,1)
SWRFlowFile = child.text
ctag = 'StartDate'
child = root.find(ctag)
if child == None: SWRBudgetError(ctag,1)
start_date = datetime.strptime(child.text,'%m/%d/%Y')
ctag = 'EndDate'
child = root.find(ctag)
if child == None: SWRBudgetError(ctag,1)
end_date = datetime.strptime(child.text,'%m/%d/%Y')
if TimeSample == None:
    ctag = 'TimeSample'
    child = root.find(ctag)
    if child == None:
        TimeSample = 'Daily'
    else:
        TimeSample = child.text
ctag = 'FractionThreshold'
child = root.find(ctag)
if child == None:
    FractionThreshold = 0.0
else:
    FractionThreshold = float(child.text)
#--output formats
child = root.find('ObservedSMPResults')
if child != None:
    SaveObsData = True
    ftxt = '{0}_{1}.smp'.format( child.text, TimeSample )
    fobsout = open(ftxt,'w')
    print 'Processed observation data will be saved to...{0}'.format( ftxt )
child = root.find('SimulatedSMPResults')
if child != None:
    SaveSimData = True
    ftxt = '{0}_{1}.smp'.format( child.text, TimeSample )
    fsimout = open(ftxt,'w')
    print 'Processed simulated data will be saved to...{0}'.format( ftxt )
#--determine the SWR data to extract
swrdata = []
ctag = 'SWRModelItems'
swrmodelitems = root.find(ctag)
if swrmodelitems != None:
    for modelitem in swrmodelitems.findall('modelitem'):
        swrdata.append( modelitem.text )
if len(swrdata) == 0: SWRBudgetError(ctag,10)
#--build index of data to extract from the flow file
SWRObj = mfb.SWR_Record(-1,SWRFlowFile)
swrdata_index = []
for sd in swrdata:
    idx  = SWRObj.get_item_number(sd)
    swrdata_index.append( idx )
#--determine the number of pool budget observations
num_pools_obs = 0
ctag = 'swbudget'
for swbudget in root.findall(ctag):
    num_pools_obs += 1
if num_pools_obs == 0: SWRBudgetError(ctag,11)
#--write summary information
print 'SWR pool definition file...{0}'.format( SWRPoolFile )
print 'processing stage data from...{0}\nFor the period from {1} to {2}'.format( SWRFlowFile, start_date, end_date )
print '  for {0} pool(s)'.format( num_pools_obs )
#--open pool data xml
pool_tree = xml.parse(SWRPoolFile)
pool_root = pool_tree.getroot()
num_unique_pools = 0
#--determine the number of unique pools in SWR
for pool in pool_root.findall('pool'):
    num_unique_pools += 1
if num_unique_pools == 0: SWRBudgetError('No "pool" entries in {0}'.format(SWRPoolFile),0)
print 'Number of unique SWR pool(s) {0}'.format( num_unique_pools )
#--simulation dates
on_date = start_date
sim_dates = []
sim_dates.append( on_date )
while on_date < end_date:
    on_date += timedelta(days=1.)
    sim_dates.append( on_date )
sim_dates = np.array( sim_dates )

#--output dates
if TimeSample == 'Daily':
    output_dates = np.copy( sim_dates )
else:
    output_dates = sampleDates( sim_dates, TimeSample )
#--arrays for data
inflow  = np.empty( (len(sim_dates)), np.float )
outflow = np.empty( (len(sim_dates)), np.float )
sim     = np.empty( (len(sim_dates)), np.float )
sim_rg  = np.empty( (len(sim_dates)), np.float )

#--process each station in the xml file
for idx,swbudget in enumerate( root.findall('swbudget') ):
    #--initialize data
    inflow.fill( Missing )
    outflow.fill( Missing )
    sim.fill( Missing )
    pools       = []
    pools_dict  = {}
    #--get smp inflow files from xml file
    processInflow = False
    child = swbudget.find('inflow_items')
    if child != None:
        processInflow = True
        for childitem in child.findall('smpitem'):
            print 'processing inflow...{0}'.format(childitem.text) 
            #--get the smp file data
            smpstation = os.path.basename(childitem.text).replace('.smp','')
            smp = pestUtil.smp(childitem.text,load=True,date_fmt='%m/%d/%Y')
            inflow = dataAdd(sim_dates,inflow,smp.records[smpstation][:,0],smp.records[smpstation][:,1])
    #--get smp outflow files from xml file
    child = swbudget.find('outflow_items')
    if child != None:
        for childitem in child.findall('smpitem'):
            print 'processing outflow...{0}'.format(childitem.text) 
            #--get the smp file data
            smpstation = os.path.basename(childitem.text).replace('.smp','')
            smp = pestUtil.smp(childitem.text,load=True,date_fmt='%m/%d/%Y')
            outflow = dataAdd(sim_dates,outflow,smp.records[smpstation][:,0],smp.records[smpstation][:,1])
    #--get station data from xml file
    station = swbudget.attrib['name']
    child = swbudget.find('pool_items')
    #--determine the SWR pool number for this pool
    for childitem in child.findall('poolitem'):
        pools.append( childitem.text )
        #--build pool dictionary
        pool_name = childitem.text
        for pool_childitem in pool_root.findall('pool'):
            if pool_childitem.attrib['name'] == pool_name:
                rg_child = pool_childitem.find('reachGroups')
                for rg in rg_child.findall('reachGroupItem'):
                    rg_number = int( rg.find('reachGroup').text )
                    print 'Station {0}...processing "{1}" pool - SWR reach group number {2}'.format(station, pool_childitem.attrib['name'], rg_number )
                    sim_rg.fill( Missing )
                    #read simulated data
                    SWRObj = mfb.SWR_Record(-1,SWRFlowFile)
                    ce1 = SWRObj.get_gage(rg_number)
                    #process each item
                    for jdx in swrdata_index:
                        sim_rg = dataAdd(sim_dates,sim_rg,sim_dates[0:ce1.shape[0]],ce1[:,jdx])
                    sim = dataAdd(sim_dates,sim,sim_dates[0:sim_rg.shape[0]],sim_rg)
    if processInflow == False:
        inflow.fill( 0.0 )
    #--average the inflow, outflow, and simulated data appropriately
    output_inflow = accumulateData( output_dates, sim_dates, inflow, FractionThreshold )
    output_outflow = accumulateData( output_dates, sim_dates, outflow, FractionThreshold )
    output_sim = accumulateData( output_dates, sim_dates, sim, FractionThreshold )
    #--calculate observed data
    nobs, output_obs = processObservations( output_inflow, output_outflow )
    #--remove simulated data without corresponding observed data
    output_sim = removeUnpairedData( output_obs, output_sim )
    #--save the data
    if SaveObsData == True:
        ctag = '{0}o'.format( station )
        saveData(fobsout, ctag, output_dates, output_obs)
    if SaveSimData == True:
        ctag = '{0}s'.format( station )
        saveData(fsimout, ctag, output_dates, output_sim)

if SaveObsData == True:
    fobsout.close()
if SaveSimData == True:
    fsimout.close()
