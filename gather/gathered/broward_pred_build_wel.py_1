import sys
import os
import numpy as np
import numpy
from datetime import datetime,timedelta
import pandas
import shapefile
import pestUtil as pu
from bro_pred import flow,seawat 

'''for now, we assume seawat and flow have the row col
'''


#--load the pre-processed stress period aligned pumpage
pump_df = pandas.read_csv('..\\..\\_pumpage\\dataframes\\pws_filled_zeros.csv',index_col=0,parse_dates=True)

well_start,well_end = datetime(year=2009,month=5,day=31),datetime(year=2012,month=5,day=31)
print 'calculating average monthly pumping for each well for period of ',well_start,well_end
pump_df = pump_df[well_start:well_end]
month_avg = pump_df.groupby(lambda x:x.month).mean()
#for wname,series in month_avg.iteritems():
#    print wname,series

wel_dtype = np.dtype([('layer','i4'),('row','i4'),('column','i4'),('flux','f4'),('aux','a20')])

#--find the last calibration wel list
cal_flow_dir = '..\\..\\_model\\bro.03\\flowlist\\'
cal_seawat_dir = '..\\..\\_model\\bro.03\\seawatlist\\'

files = os.listdir(cal_flow_dir)
dist = 1.0E+10
last = None
for f in files:
    dt = datetime.strptime(f.strip().split('.')[0].split('_')[1],'%Y%m%d')
    d = (flow.start - dt).days 
    if d < dist and 'wel' in f.lower():
        last = f
        dist = d
flow_wells = np.genfromtxt(cal_flow_dir+last,dtype=wel_dtype,comments='|')
flow_lrc = {}
unique = np.unique(flow_wells['aux'])
for u in unique:
    wells = flow_wells[np.where(flow_wells['aux']==u)]
    strings = []
    for w in wells:
        line = ' {0:9d} {1:9d} {2:9d} '.format(w['layer'],w['row'],w['column'])
        strings.append(line)
    flow_lrc[u.replace('#','')] = strings


files = os.listdir(cal_seawat_dir)
dist = 1.0E+10
last = None
for f in files:
    dt = datetime.strptime(f.strip().split('.')[0].split('_')[1],'%Y%m%d')
    d = (flow.start - dt).days 
    if d < dist and 'wel' in f.lower():
        last = f
        dist = d
seawat_wells = np.genfromtxt(cal_seawat_dir+last,dtype=wel_dtype,comments='|')
seawat_lrc = {}
unique = np.unique(seawat_wells['aux'])
for u in unique:
    wells = seawat_wells[np.where(seawat_wells['aux']==u)]
    strings = []
    for w in wells:
        line = ' {0:9d} {1:9d} {2:9d} '.format(w['layer'],w['row'],w['column'])
        strings.append(line)
    seawat_lrc[u.replace('#','')] = strings





#




#--this is where we need the flow->seawat row col map for the wells


f_wel = open(flow.root+'.wel','w',0)
f_wel.write('# '+sys.argv[0]+' '+str(datetime.now())+'\n')
f_wel.write(' {0:9.0f} {1:9.0f} {2}\n'.format(len(flow_wells),flow.well_unit,"NOPRINT"))    

f_wel2 = open(seawat.root+'.wel','w',0)
f_wel2.write('# '+sys.argv[0]+' '+str(datetime.now())+'\n')
f_wel2.write(' {0:9.0f} {1:9.0f} {2}\n'.format(len(seawat_wells),seawat.well_unit,"NOPRINT"))    


sp_start = flow.sp_start
sp_len = flow.sp_len

#--for writing the external wel lists
bnd_prefix = flow.list_dir+'wel_'
bnd_prefix2 = seawat.list_dir+'wel_'


sfac_mult = 0.00 #per annum
missing = []
#for i,start in enumerate(sp_start):       
for month,record in month_avg.iterrows():        
    #bnd_name = bnd_prefix+start.strftime('%Y%m%d')+'.dat'
    #bnd_name2 = bnd_prefix2+start.strftime('%Y%m%d')+'.dat'
    #record = month_avg.ix[start.month]        
    bnd_name = bnd_prefix+str(month)+'.dat'
    bnd_name2 = bnd_prefix2+str(month)+'.dat'
    wel_sp,wel_sp2 = [],[]
    for dep_name,value in zip(record.index,record.values):
        if dep_name in flow_lrc.keys():            
            #--write all values for wel - makes SSM much easier
            
            flow_val = value / len(flow_lrc[dep_name])
            for rcl_string in flow_lrc[dep_name]:                
                line_wel = rcl_string + ' {0:20.8E} #{1}\n'.format(-flow_val,dep_name)
                wel_sp.append(line_wel)
        else:
            if dep_name not in missing:
                missing.append(dep_name)
            #print 'missing flow wells for record',dep_name

        if dep_name in seawat_lrc.keys():            
            seawat_val = value / len(seawat_lrc[dep_name]) 
            for rcl_string in seawat_lrc[dep_name]:
                line_wel = rcl_string + ' {0:20.8E} #{1}\n'.format(-seawat_val,dep_name)
                wel_sp2.append(line_wel)
        else:
            if dep_name not in missing:
                missing.append(dep_name)                        
            #print 'missing seawat wells for record',dep_name

    f_bnd = open(bnd_name,'w',0)
    for line in wel_sp:
        f_bnd.write(line)
    f_bnd.close()

    f_bnd2 = open(bnd_name2,'w',0)
    for line in wel_sp2:
        f_bnd2.write(line)
    f_bnd2.close()
    

for i,start in enumerate(sp_start): 
    bnd_name = bnd_prefix+str(start.month)+'.dat'
    bnd_name2 = bnd_prefix2+str(start.month)+'.dat'


    f_wel.write(' {0:9.0f} {1:9.0f} '.format(len(wel_sp),0)+'  # Stress Period '+str(i+1)+' '+start.strftime('%Y%m%d')+'\n')    
    f_wel2.write(' {0:9.0f} {1:9.0f} '.format(len(wel_sp),0)+'  # Stress Period '+str(i+1)+' '+start.strftime('%Y%m%d')+'\n')        
    f_wel.write('OPEN/CLOSE '+bnd_name+' \n')
    f_wel2.write('OPEN/CLOSE '+bnd_name2+' \n')
    
    
    
    
    i += 1
  
f_wel.close()      
f_wel2.close() 

for m in missing:
    print m        



