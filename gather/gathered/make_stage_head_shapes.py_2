import sys
import calendar
import numpy as np
from numpy import ma
import pylab
import MFBinaryClass as mfb
import shapefile
import arrayUtil as au



def load_reaches(nreach,file,skiprows=0,usecols=[0]):
    f = open(file,'r')
    for r in range(skiprows):
        f.readline()
    data = np.zeros(len(usecols))
    
    for line in f:
        this_line = line.strip().split()
        this_entry = []
        #print this_line
        for c in range(len(usecols)):
            this_entry.append(float(this_line[usecols[c]]))
        data = np.vstack((data,np.array(this_entry)))
        if data.shape[0] > nreach: break
    return np.delete(data,0,axis=0)


def load_swr_ibnd(file):
    irch = []
    ibnd = []
    f = open(file,'r')
    for line in f:
        if line[0] != '#' and line != '':
            raw = line.strip().split()
            irch.append(int(raw[0]))
            ibnd.append(int(raw[1]))
    f.close()
    return np.array([irch,ibnd]).transpose()



def save_stage(reach,rchgrp,stage,file='stage_out.dat'):
    assert len(reach) == len(stage)
    f = open(file,'w')
    for r in range(len(reach)):
        #print reach[r],stage[r]
        f.write('{0:10.0f} {2:15.6f}  # {1:1.0f} \n'.format(int(reach[r]),int(rchgrp[r]),float(stage[r])))
    f.close()
    return
    
   


results = '.\\'
day_2_sec = 1.0/86400.0
shape_dir = 'shapes\\'
#reach_shpfile = shape_dir+'polylines_active'
#reach_shp = shapefile.Reader(reach_shpfile)
#num_records = reach_shp.numRecords
#polylines = reach_shp.shapes()
#polyline_header = reach_shp.dbfHeader()
#
#rch_idx = 12
#rchgrp_idx = 13
#min_idx = 24
#init_idx = 27
#wr = shapefile.Writer()
#for i,item in enumerate(polyline_header):
#    print i,item
#    wr.field(item[0],fieldType=item[1],size=item[2],decimal=item[3])
#
#
#reach_key = load_reaches(bi.nreach,'swr_full\\swr_ds4a.dat',skiprows=2,usecols=[0,2,4,5])
#reach_array = np.zeros((bi.nrow,bi.ncol)) - 999.
#
#ibnd = load_swr_ibnd('swr_full\\swr_ds6.dat')
#init = np.loadtxt('swr_full\\swr_ds14a.dat',usecols=[0,1])
##print ibnd[0]
##sys.exit()
#
##--build unique rg list
#rg_unique = []
#irg_num = []
#rg_count = 1
#for rg in reach_key[:,1]:
#    if rg not in irg_num:
#        rg_unique.append(rg_count)
#        rg_count += 1
#        irg_num.append(rg)
##print len(rg_unique)
##sys.exit()
#
#swr_obj = mfb.SWR_Record(-1,results+'bro_6lay.rgp')
#try:
#    totim,dt,kper,kstp,swrstp,success,compele = swr_obj.get_record(float(sys.argv[1]))
#    print 'SWR binary from totim ',sys.argv[1],' read'
#except:
#    totim,dt,kper,kstp,swrstp,success,compele = swr_obj.get_record()
#ce_items = swr_obj.get_item_list()
#f_list = []
#
#


#print compele.shape
#sys.exit()
#print compele.shape
#sys.exit()

#for item in ce_items:
#    wr.field(item,fieldType='N',size=30,decimal=5)
#wr.field('depth',fieldType='N',size=50,decimal=5)
#wr.field('delta_stage',fieldType='N',size=50,decimal=10)
#
##--loop over each polyline
#print 'processing reaches...'
#for p in range(num_records):
#    this_rec = reach_shp.record(p)
#    this_rchgrp = this_rec[rchgrp_idx]
#    this_reach = this_rec[rch_idx]   
#    this_min_elev = this_rec[min_idx]
#    this_ibnd = ibnd[np.where(ibnd[:,0]==this_reach),1][0][0]        
#    this_init = init[np.where(init[:,0]==this_reach),1][0][0]
#    if this_ibnd != 0: 
#        print this_rchgrp,rg_unique[irg_num.index(this_rchgrp)]
#        this_rchgrp_u = rg_unique[irg_num.index(this_rchgrp)]
#        this_results = compele[this_rchgrp_u-1]    
#        this_rec[init_idx] = this_init
#        #print compele.shape,this_rchgrp,this_results[0]
#        #print this_reach,this_results
#        #--stage       
#        this_rec.append(this_results[0])
#        #--flows - convert from ft3/day to ft3/sec
#        for r in range(1,len(this_results)):
#            this_rec.append(this_results[r]*day_2_sec)
#        #-depth
#        this_rec.append(this_results[0]-this_min_elev)
#        #--stage change from initial
#        #print this_init,this_results[0]
#        this_rec.append(this_init-this_results[0])
#        
#        wr.poly([polylines[p].points],shapeType=3)
#        wr.record(this_rec)
#wr.save(shape_dir+'reach_results')
#print 'done' 
#
#swr_obj = mfb.SWR_Record(-1,results+'bro_6lay.rgp')

  
#sys.exit()
  
#--heads
nrow,ncol,nlay = 383,262,3
print 'loading head results'    
hds_handle = mfb.MODFLOW_Head(nlay,nrow,ncol,results+'tsala.hds')
try:
    totim,kstp,kper,h,success = hds_handle.get_record(float(sys.argv[1]))
    print 'heads from totim ',sys.argv[1],' read'
except:
    totim,kstp,kper,h,success = hds_handle.get_record()    
if success is False:
    print 'unable to read from HDS file successfully'
    sys.exit()
print 'done'

ibound = np.loadtxt('ref_shp\ibound_array.ref')

print 'loading grid...'
grid_shpfile = shape_dir+'elevation4'
grid_shp = shapefile.Reader(grid_shpfile)
cells = grid_shp.shapes()
records = grid_shp.records()
grid_header = grid_shp.dbfHeader()
row_idx = 2
col_idx = 3
print 'done'

wr = shapefile.Writer()
for i,item in enumerate(grid_header):
    #print i,item
    wr.field(item[0],fieldType=item[1],size=item[2],decimal=item[3])
for l in range(nlay):
    wr.field('layer_'+str(l+1),fieldType='N',size=20,decimal=5)



print 'processing head results'    
for c,r in zip(cells,records):      
    this_row = r[row_idx]
    this_col = r[col_idx]
    this_ibound = ibound[this_row-1,this_col-1]
    if this_ibound != 0:
        for l in range(nlay):
            this_head = h[l,this_row-1,this_col-1]
            r.append(this_head)
        wr.poly([c.points],shapeType=5)
            #print this_rec
        #print len(r)
        wr.record(r)
wr.save(shape_dir+'grid_heads')
print 'done'    


#--get stages for init stage
#swr_obj = mfb.SWR_Record(0,results+'bro_6lay.stg')
#totim,dt,kper,kstp,swrstp,success,r = swr_obj.get_record()
##print reach_key[:,0],r
##np.savetxt('stage_out.dat',np.array([reach_key[:,0],r]))
#save_stage(reach_key[:,0],reach_key[:,1],r)
