
from numpy import ones, empty
from mbase import package

class mfuzf1(package):
    'UZF1 class'
    def __init__(self, model, \
    nuztop = 1, iuzfopt = 0, irunflg = 0, ietflg = 0, iuzfcb1 = 57, iuzfcb2 = 0, ntrail2 = 10, nsets = 20, nuzgag = 0, surfdep = 1.0, \
    iuzfbnd = 1, irunbnd = 0, vks = 1.0E-6, eps = 3.5, thts = 0.35, thti = 0.05, row_col_iftunit_iuzopt = [], \
    finf = 1.0E-8, pet = 5.0E-8, extdp = 15.0, extwc = 0.1, \
    uzfbud_ext = [], extension ='uzf', unitnumber = 19):
        package.__init__(self, model, extension, ['UZF'], unitnumber) # Call ancestor's init to set self.parent, extension, name and unit number
        if self.parent.get_package('RCH') != None or self.parent.get_package('EVT') != None:
            print 'WARNING!\n The RCH and EVT packages should not be active when the UZF1 package is active!'
        if self.parent.version == 'mf2000':
            print 'WARNING!\nThe UZF1 package is only compatible with MODFLOW-2005!'
        nrow, ncol, nlay, nper = self.parent.nrow_ncol_nlay_nper
        self.heading = '# UZF1 for MODFLOW, generated by Flopy.'
        self.url = 'uzf_unsaturated_zone_flow_pack.htm'
        # Data Set 1
        # NUZTOP IUZFOPT IRUNFLG IETFLG IUZFCB1 IUZFCB2 [NTRAIL2 NSETS2] NUZGAG SURFDEP
        self.nuztop = nuztop
        self.iuzfopt = iuzfopt
        self.irunflg = irunflg
        self.ietflg = ietflg
        self.iuzfcb1 = iuzfcb1
        self.iuzfcb2 = iuzfcb2
        class_nam = ['UZF']
        if (not isinstance(unitnumber, list)):
            unitnumber = [unitnumber]
        if (not isinstance(extension, list)):
            extension = [extension]
        if iuzfcb1 > 0 and iuzfcb2 < 1:
            unitnumber.append(iuzfcb1)
            extension.append(extension[0]+'bt1')
            class_nam += ['DATA(BINARY)']
        elif iuzfcb1 < 1 and iuzfcb2 > 0:
            unitnumber.append(iuzfcb2)
            extension.append(extension[0]+'bt2')
            class_nam += ['DATA(BINARY)']
        elif iuzfcb1 > 0 and iuzfcb2 > 0:
            unitnumber.append(iuzfcb1)
            extension.append(extension[0]+'bt1')
            unitnumber.append(iuzfcb2)
            extension.append(extension[0]+'bt2')
            class_nam += ['DATA(BINARY)','DATA(BINARY)']
        if iuzfopt > 0:
            self.ntrail2 = ntrail2
            self.nsets = nsets
        self.nuzgag = nuzgag
        self.surfdep = surfdep
        #Data Set 2
        #IUZFBND (NCOL, NROW) -- U2DINT
        self.iuzfbnd = empty((nrow, ncol), dtype = int)
        self.iuzfbnd = self.assignarray( self.iuzfbnd, iuzfbnd,load=True)
        #If IRUNFLG > 0: Read item 3
        #Data Set 3
        #[IRUNBND (NCOL, NROW)] -- U2DINT
        if irunflg > 0:
            self.irunbnd = empty((nrow, ncol), dtype = int)
            self.irunbnd = self.assignarray( self.irunbnd, irunbnd,load=model.load)
        #IF the absolute value of IUZFOPT = 1: Read item 4.
        #Data Set 4
        #[VKS (NCOL, NROW)] -- U2DREL
        if abs(iuzfopt) == 1:
            self.vks = empty((nrow, ncol))
            self.vks = self.assignarray( self.vks, vks,load=model.load)
        if iuzfopt > 0:
            #Data Set 5
            #EPS (NCOL, NROW) -- U2DREL
            self.eps = empty((nrow, ncol))
            self.eps = self.assignarray( self.eps, eps,load=model.load)
            #Data Set 6
            #THTS (NCOL, NROW) -- U2DREL
            self.thts = empty((nrow, ncol))
            self.thts = self.assignarray( self.thts, thts,load=model.load)
            #Data Set 7
            #[THTI (NCOL, NROW)] -- U2DREL
            self.thti = empty((nrow, ncol))
            thti = self.assignarray( self.thti, thti,load=model.load)
        #Data Set 8
        #[IUZROW] [IUZCOL] IFTUNIT [IUZOPT]
        if len(row_col_iftunit_iuzopt) != nuzgag:
            print "WARNING!\nItem 8 doesn't correspond with NUZGAG.\nNUZGAG set to 0"
            self.nuzgag = 0
            self.row_col_iftunit_iuzopt = []
        else:
            self.row_col_iftunit_iuzopt = row_col_iftunit_iuzopt
            i = 0
            for l in row_col_iftunit_iuzopt:
                unitnumber.append(abs(l[0][2]))
                if uzfbud_ext ==[]:
                    extension.append(extension[0] + 'b' + str(i))
                else:
                    extension.append(uzfbud_ext[i])
                i += 1
            package.__init__(self, model, extension, class_nam + nuzgag *['DATA'], unit_number = unitnumber)
        #Dataset 9, 11, 13 and 15 will be written automatically in the write_file function
        #Data Set 10
        #[FINF (NCOL, NROW)] – U2DREL
        self.finf = []
        if (not isinstance(finf, list)):
            finf = [finf]
        for a in finf:
            b = empty((nrow, ncol))
            b = self.assignarray(b , a,load=model.load )
            self.finf = self.finf + [b]
        if ietflg > 0:
            #Data Set 12
            #[PET (NCOL, NROW)] – U2DREL
            self.pet = []
            if (not isinstance(pet, list)):
                pet = [pet]
            for a in pet:
                b = empty((nrow, ncol))
                b = self.assignarray(b , a,load=model.load )
                self.pet = self.pet + [b]
            #Data Set 14
            #[EXTDP (NCOL, NROW)] – U2DREL
            self.extdp = []
            if (not isinstance(extdp, list)):
                extdp = [extdp]
            for a in extdp:
                b = empty((nrow, ncol))
                b = self.assignarray(b , a,load=model.load )
                self.extdp = self.extdp + [b]
            #Data Set 16
            #[EXTWC (NCOL, NROW)] – U2DREL
            if iuzfopt> 0:
                self.extwc = []
                if (not isinstance(extwc, list)):
                    extwc = [extwc]
                for a in extwc:
                    b = empty((nrow, ncol))
                    b = self.assignarray(b , a,load=model.load )
                    self.extwc = self.extwc + [b]
        self.parent.add_package(self)
    def __repr__( self ):
        return 'UZF1 class'
    def ncells( self):
        # Returns the  maximum number of cells that have recharge (developped for MT3DMS SSM package)
        nrow, ncol, nlay, nper = self.parent.nrow_ncol_nlay_nper
        return (nrow * ncol)
    def write_file(self):
        nrow, ncol, nlay, nper = self.parent.nrow_ncol_nlay_nper
        # Open file for writing
        f_uzf = open(self.fn_path, 'w')
        f_uzf.write('%s\n' % self.heading)
        if self.iuzfopt > 0:
            comment = ' NUZTOP IUZFOPT IRUNFLG IETFLG IUZFCB1 IUZFCB2 NTRAIL NSETS NUZGAGES'
            f_uzf.write('%10i%10i%10i%10i%10i%10i%10i%10i%10i%10f%s\n' % (self.nuztop, self.iuzfopt, self.irunflg, self.ietflg, self.iuzfcb1, self.iuzfcb2, self.ntrail2, self.nsets, self.nuzgag, self.surfdep, comment))
        else:
            comment = ' NUZTOP IUZFOPT IRUNFLG IETFLG IUZFCB1 IUZFCB2 NUZGAGES'
            f_uzf.write('%10i%10i%10i%10i%10i%10i%10i%10f%s\n' % (self.nuztop, self.iuzfopt, self.irunflg, self.ietflg, self.iuzfcb1, self.iuzfcb2, self.nuzgag, self.surfdep, comment))
        comment = ' UZFBND'
       	self.parent.write_array(f_uzf, self.iuzfbnd, self.unit_number[0], True, 13, ncol, comment,ext_base='iuzfbnd')
        if self.irunflg > 0:
            comment = ' IRUNBND'
       	    self.parent.write_array(f_uzf, self.irunbnd, self.unit_number[0], True, 13, ncol, comment,ext_base='irunbnd')
        #IF the absolute value of IUZFOPT = 1: Read item 4.
        #Data Set 4
        #[VKS (NCOL, NROW)] -- U2DREL
        if abs(self.iuzfopt) == 1:
            comment = ' VKS'
            self.parent.write_array(f_uzf, self.vks, self.unit_number[0], True, 13, ncol, comment,ext_base='vks')
        if self.iuzfopt > 0:
            #Data Set 5
            #EPS (NCOL, NROW) -- U2DREL
            comment = ' EPS'
       	    self.parent.write_array(f_uzf, self.eps, self.unit_number[0], True, 13, ncol, comment,ext_base='eps')
            #Data Set 6
            #THTS (NCOL, NROW) -- U2DREL
            comment = ' THTS'
            self.parent.write_array(f_uzf, self.thts, self.unit_number[0], True, 13, ncol, comment,ext_base='thts')
            #Data Set 7
            #[THTI (NCOL, NROW)] -- U2DREL
            if not self.parent.get_package('DIS').steady[0]:
                comment = ' THTI'
                self.parent.write_array(f_uzf, self.thti, self.unit_number[0], True, 13, ncol, comment,ext_base='thti')
        #If NUZGAG>0: Item 8 is repeated NUZGAG times
        #Data Set 8
        #[IUZROW] [IUZCOL] IFTUNIT [IUZOPT]
        if self.nuzgag > 0:
            for n in range(self.nuzgag):
                if self.row_col_iftunit_iuzopt[n][0][2] > 0:
                    comment = ' IUZROW IUZCOL IFTUNIT IUZOPT'
                    f_uzf.write('%10i%10i%10i%10i%s\n' % (tuple(self.row_col_iftunit_iuzopt[n][0] + [comment])))
                else:
                    comment = ' IFTUNIT'
                    f_uzf.write('%10i%s\n' % (tuple([self.row_col_iftunit_iuzopt[n][0][2]] + [comment])))
        for n in range(nper):
            comment = ' NUZF1 for stress period ' + str(n + 1)
            if (n < len(self.finf)):
                nuzf1 = 1
            else:
                nuzf1 = -1
            f_uzf.write('%10i%s\n' % (nuzf1, comment))
            comment = 'FINF for stress period ' + str(n + 1)
            if (n < len(self.finf)):
                self.parent.write_array( f_uzf, self.finf[n], self.unit_number[0], True, 13, ncol, comment,ext_base='finf' )
            comment = ' NUZF2 for stress period ' + str(n + 1)
            if self.ietflg > 0:
                if (n < len(self.pet)):
                    nuzf2 = 1
                else:
                    nuzf2 = -1
                f_uzf.write('%10i%s\n' % (nuzf2, comment))
                comment = 'PET for stress period ' + str(n + 1)
                if (n < len(self.pet)):
                    self.parent.write_array( f_uzf, self.pet[n], self.unit_number[0], True, 13, ncol, comment,ext_base='pet' )
                comment = ' NUZF3 for stress period ' + str(n + 1)
                if (n < len(self.extdp)):
                    nuzf3 = 1
                else:
                    nuzf3 = -1
                f_uzf.write('%10i%s\n' % (nuzf3, comment))
                comment = 'EXTDP for stress period ' + str(n + 1)
                if (n < len(self.extdp)):
                    self.parent.write_array( f_uzf, self.extdp[n], self.unit_number[0], True, 13, ncol, comment,ext_base='extdp' )
                comment = ' NUZF4 for stress period ' + str(n + 1)
                if self.iuzfopt > 0:
                    if (n < len(self.extwc)):
                        nuzf4 = 1
                    else:
                        nuzf4 = -1
                    f_uzf.write('%10i%s\n' % (nuzf4, comment))
                    comment = 'EXTWC for stress period ' + str(n + 1)
                    if (n < len(self.extwc)):
                        self.parent.write_array( f_uzf, self.extwc[n], self.unit_number[0], True, 13, ncol, comment,ext_base='extwc' )
        f_uzf.close()