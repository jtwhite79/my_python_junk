from numpy import ones, empty
from mbase import package

class mfevt(package):
    'Evapotranspiration class'
    def __init__(self, model, nevtop=3, ievtcb=0, surf=0., evtr=1e-3, exdp=1., ievt=1, extension ='evt', unitnumber=22,external=True):
        '''
        external flag is used to control writing external arrays of constant value
        since this package has the potential to create a lot of external arrays
        '''
        package.__init__(self, model, extension, 'EVT', unitnumber) # Call ancestor's init to set self.parent, extension, name and unit number
        nrow, ncol, nlay, nper = self.parent.nrow_ncol_nlay_nper
        self.heading = '# EVT for MODFLOW, generated by Flopy.'
        self.url = 'evt.htm'
        self.nevtop = nevtop
        self.ievtcb = ievtcb
        self.surf = []
        self.evtr = []
        self.exdp = []
        self.ievt = []        
        self.external = external
        if self.external is False:
            load = True
        else:
            load = model.load            
        if (not isinstance(surf, list)):
            surf = [surf]
        for a in surf:
            b = empty((nrow, ncol))
            b = self.assignarray(b , a, load=load )
            self.surf = self.surf + [b]
        if (not isinstance(evtr, list)):
            evtr = [evtr]
        for a in evtr:
            b = empty((nrow, ncol))
            b = self.assignarray(b , a,load=load )
            self.evtr = self.evtr + [b]
        if (not isinstance(exdp, list)):
            exdp = [exdp]
        for a in exdp:
            b = empty((nrow, ncol))
            b = self.assignarray(b , a,load=load )
            self.exdp = self.exdp + [b]
        if (not isinstance(ievt, list)):
            ievt = [ievt]
        for a in ievt:
            b = ones((nrow, ncol), dtype='int32')
            b = self.assignarray(b , a,load=load )
            self.ievt = self.ievt + [b]
        self.np = 0
        self.parent.add_package(self)
    def __repr__( self ):
        return 'Evapotranspiration class'
    def ncells( self):
        # Returns the  maximum number of cells that have evapotranspiration (developped for MT3DMS SSM package)
        nrow, ncol, nlay, nper = self.parent.nrow_ncol_nlay_nper
        return (nrow * ncol)
    def write_file(self):
        nrow, ncol, nlay, nper = self.parent.nrow_ncol_nlay_nper
        f_evt = open(self.fn_path, 'w')
        f_evt.write('%s\n' % self.heading)
        f_evt.write('%10i%10i\n' % (self.nevtop, self.ievtcb))
        for n in range(nper):
            comment = 'Evapotranspiration array for stress period ' + str(n + 1)
            if (n < len(self.surf)):
                insurf = 1
            else:
                insurf = -1
            if (n < len(self.evtr)):
                inevtr = 1
            else:
                inevtr = -1
            if (n < len(self.exdp)):
                inexdp = 1
            else:
                inexdp = -1
            if (n < len(self.ievt)):
                inievt = 1
            else:
                inievt = -1
            f_evt.write('%10i%10i%10i%10i\n' % (insurf, inevtr, inexdp, inievt))
            comment = 'Evapotranspiration surface array for stress period ' + str(n + 1)
            if (n < len(self.surf)):
                if self.external:
                    self.parent.write_array( f_evt, self.surf[n], self.unit_number[0], True, 13, ncol, comment,ext_base='surf_'+str(n+1) )
                else:
                    self.parent.write_array( f_evt, self.surf[n], self.unit_number[0], True, 13, ncol, comment )                    
            comment = 'Evapotranspiration rate array for stress period ' + str(n + 1)
            if (n < len(self.evtr)):
                if self.external:
                    self.parent.write_array( f_evt, self.evtr[n], self.unit_number[0], True, 13, ncol, comment,ext_base='evtr_'+str(n+1) )
                else:
                    self.parent.write_array( f_evt, self.evtr[n], self.unit_number[0], True, 13, ncol, comment)
            comment = 'Evapotranspiration extinction depth array for stress period ' + str(n + 1)
            if (n < len(self.exdp)):
                if self.external:
                    self.parent.write_array( f_evt, self.exdp[n], self.unit_number[0], True, 13, ncol, comment,ext_base='exdp_'+str(n+1))
                else:
                    self.parent.write_array( f_evt, self.exdp[n], self.unit_number[0], True, 13, ncol, comment)
            comment = 'Evapotranspiration layers for stress period ' + str(n + 1)
            if ((n < len(self.ievt)) and (self.nevtop == 2)):
                if self.external:
                    self.parent.write_array( f_evt, self.ievt[n], self.unit_number[0], True, 13, ncol, comment,ext_base='ievt_'+str(n+1) )
                else:
                    self.parent.write_array( f_evt, self.exdp[n], self.unit_number[0], True, 13, ncol, comment)
        f_evt.close()


