from mbase import package

class mfoc(package):
    'Output control package'
    def __init__(self, model,ihedfm=0,iddnfm=0,item2=[[0,1,0,1]], \
                 item3=[[0,0,1,0]],extension=['oc','hds','ddn','cbc'],\
                 unitnumber=[14, 51, 52, 53],save_head_every=None,\
                 words=None,compact=False,chedfm=None,cddnfm=None):
        
        '''
           words = list containing any of ['head','drawdown','budget']
           optionally, words in a 2-D list of shape:
           [[per,stp,'head','drawdown','budget']], where
           per,stp is the stress period,time step of output.
           To print heads/drawdowns, ihedfm/iddnfm must be non-zero
           
        '''
        
        # Call ancestor's init to set self.parent, 
        # extension, name and unit number
        package.__init__(self, model, extension, \
                         ['OC', 'DATA(BINARY)', 'DATA(BINARY)',\
                         'DATA(BINARY)'], unitnumber, \
                          extra=['','REPLACE','REPLACE','REPLACE']) 
        self.heading = '# Output control package file'+\
                       ' for MODFLOW, generated by Flopy.'
        if words is not None:
            self.heading += ' Output control by words option'
                               
        self.url = 'oc.htm'
        self.ihedfm = ihedfm
        self.iddnfm = iddnfm 
        self.chedfm = chedfm
        self.cddnfm = cddnfm       
        
        #--using words    
        if words is not None:
            hflag,dflag = False,False
            if 'head' in words and ihedfm != 0:
                hflag = True
            if 'drawdown' in words and iddnfm != 0:
                dflat = True
            
            self.words = []
            self.compact = compact
            
            #--first try for simple 1-d list
            try:                
                for w in words:
                    self.words.append(w.upper())
                
                #--build a list of word output options
                word_list = []            
                if save_head_every is not None:
                    nstp = self.parent.get_package('DIS').nstp
                    for p in range(len(nstp)):
                        for s in range(nstp[p]):
                            if s % save_head_every == 0:                            
                                word_list.append('PERIOD {0:5.0f} STEP {1:5.0f}\n'\
                                                 .format(p+1,s+1))
                                for w in words:
                                    word_list.append('  SAVE '+w.upper()+'\n')
                                if hflag:
                                    word_list.append('  PRINT HEAD\n')
                                if dflag:    
                                    word_list.append('  PRINT DRAWDOWN\n')
                                word_list.append('\n')                                
                    self.word_list = word_list
                
                else:                
                    #--not going to try to decipher item2 and item3 - too lazy
                    raise TypeError,\
                       'to use the words OC option, save_head_every must be used'
            #--try for a 2-d list
            except:
                word_list = []
                self.words = []
                for i in words:                
                    p,s = int(i[0]),int(i[1])
                    wwords = i[2:]                    
                    word_list.append('PERIOD {0:5.0f} STEP {1:45.0f}\n'\
                                                 .format(p,s))
                    for w in wwords:
                        word_list.append('  SAVE '+w.upper()+'\n')                        
                        if w.upper() not in self.words:
                            self.words.append(w.upper())
                    if hflag:
                        word_list.append('  PRINT HEAD\n')
                    if dflag:    
                        word_list.append('  PRINT DRAWDOWN\n')
                    word_list.append('\n')
                self.word_list = (word_list)                    
        
        #--numeric codes                                       
        else:
            self.words = None
            dummy, self.item2 = self.assign_layer_row_column_data(item2, 4)
            if (item2 != None):
                error_message = 'item2 must have 4 columns'
                if (not isinstance(item2, list)):
                    item2 = [item2]
                for a in item2:
                    assert len(a) == 4, error_message
                self.item2 = item2
            if (item3 != None):
                error_message = 'item3 must have 4 columns'
                if (not isinstance(item3, list)):
                    item3 = [item3]
                for a in item3:
                    assert len(a) == 4, error_message
                self.item3 = item3
            if save_head_every is not None:
                nstp = self.parent.get_package('DIS').nstp
                self.item3 = []
                #len(nstp) is the number of stress periods
                for p in range(len(nstp)): 
                    for s in range(1,nstp[p]+1):
                        if s % save_head_every == 0:
                            self.item3.append([0,0,1,0])
                        else:
                            self.item3.append([0,0,0,0])
            
        self.parent.add_package(self)
    def __repr__( self ):
        return 'Output control package class'
    def write_file(self):
        # Open file for writing
        f_oc = open(self.fn_path, 'w')
        f_oc.write('%s\n' % self.heading)
        nstp = self.parent.get_package('DIS').nstp
                
        #--words option
        if self.words is not None:            
           
            f_oc.write('HEAD PRINT FORMAT {0:3.0f}\n'\
                           .format(self.ihedfm))            
            if self.chedfm is not None:
                f_oc.write('HEAD SAVE FORMAT {0:3.0f}\n'\
                           .format(self.ihedfm))            
            f_oc.write('HEAD SAVE UNIT {0:5.0f}\n'\
                       .format(self.unit_number[1]))            
            
            f_oc.write('DRAWDOWN PRINT FORMAT {0:3.0f}\n'\
                           .format(self.iddnfm))
            if self.cddnfm is not None:
                f_oc.write('DRAWDOWN SAVE FORMAT {0:3.0f}\n'\
                           .format(self.iddnfm))
            f_oc.write('DRAWDOWN SAVE UNIT {0:5.0f}\n'\
                       .format(self.unit_number[2]))
            if self.compact:
                f_oc.write('COMPACT BUDGET FILES')
            f_oc.write('\n')
            for i in self.word_list:
                f_oc.write(i)
        
        #--numeric codes option     
        else:                                  
            f_oc.write('%3i%3i%5i%5i\n' % \
                      (self.ihedfm, self.iddnfm, self.unit_number[1],\
                       self.unit_number[2]))
            
            ss = 0
            #len(nstp) is the number of stress periods
            for p in range(len(nstp)): 
                for s in range(nstp[p]):
                    if (ss < len(self.item2)):
                        a = self.item2[ss]
                    else:
                        a = self.item2[-1]
                    if (ss < len(self.item3)):
                        b = self.item3[ss]
                    else:
                        b = self.item3[-1]
                    f_oc.write('%3i%3i%3i%3i  Period %3i, step %3i\n' \
                               % (a[0], a[1], a[2], a[3], p + 1, s + 1) )
                    f_oc.write('%3i%3i%3i%3i\n' % (b[0], b[1], b[2], b[3]) )
                    ss = ss + 1
        f_oc.close()
